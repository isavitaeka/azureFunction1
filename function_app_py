import logging
import azure.functions as func
import json
from pymongo import MongoClient
from bson import ObjectId


# Initialize the MongoDB client
MONGO_URI = "mongodb://autocomppoc:fqX5VFRG7VF9LJ0TgvWMGPGyNwLJQmNVrT3qiNks1iZSjJdbMVFJvnOVYLqw1C76xtdi7eS6gdvfACDbStHCVg==@autocomppoc.mongo.cosmos.azure.com:10255/?ssl=true&replicaSet=globaldb&retrywrites=false&maxIdleTimeMS=120000&appName=@autocomppoc@"
DATABASE_NAME = "Autocompensation"
COLLECTION_NAME = "Output"

client = MongoClient(MONGO_URI)
database = client[DATABASE_NAME]
collection = database[COLLECTION_NAME]

response_data = {
    "message": "Hello, this is a JSON response!",
    "status": "success"
}
response_json = {}

app = func.FunctionApp(http_auth_level=func.AuthLevel.ANONYMOUS)
@app.route(route="read_autocomp")
def read_autocomp(req: func.HttpRequest) -> func.HttpResponse:
    #logging.info('Request received is : ' + req)
    
    serviceId = req.params.get('serviceId')
    identifier = req.params.get('identifier')
    logging.info('Autocomp request received for ServiceId : ' + serviceId)
    logging.info('Autocomp request received for Id : ' + identifier)

    try:
        query = {"_id": ObjectId("670698798006afb9ec8f99c3")}
        #query_serviceId = {"ServiceID": "VFP7894561"}
        #query_serviceId = {"ServiceID": serviceId}
        if identifier is None:
            query_serviceId = {"ServiceID": serviceId, "id_": identifier}
        else:
            query_serviceId = {"ServiceID": serviceId}

        # Fetch a document from MongoDB
        document = collection.find_one(query_serviceId)
        if document:
            # Convert ObjectId to string
            document["_id"] = str(document["_id"])
            response_data["data"] = document
            logging.info(document["_id"])
            logging.info(document)
        else:
            response_data["data"] = "NO Autocomp Record exists"
        
        return func.HttpResponse(
            json.dumps(response_data),
            mimetype="application/json",
            status_code=200
        )
    except Exception as e:
        logging.error(f"Error: {e}")
        return func.HttpResponse(
            "Some ERROR",
            status_code=500
        )


@app.route(route="autcompFnGetCompDetails", auth_level=func.AuthLevel.FUNCTION)
def autcompFnGetCompDetails(req: func.HttpRequest) -> func.HttpResponse:
    logging.info('Python HTTP trigger function processed a request.')

    name = req.params.get('name')
    if not name:
        try:
            req_body = req.get_json()
        except ValueError:
            pass
        else:
            name = req_body.get('name')

    if name:
        return func.HttpResponse(f"This HTTP triggered function executed successfully.")
    else:
        return func.HttpResponse(
             "Getting data from DB",
             status_code=200
        )
        

@app.route(route="read_all_records")
def read_all_records(req: func.HttpRequest) -> func.HttpResponse:
    logging.info('Request received')

    try:
        # Fetch all documents from the collection
        documents = collection.find({}, {"ServiceID": 1, "IncidentID": 1, "id_": 1})  # Add other attributes as needed

        # Convert documents to a list of dictionaries
        response_data = {"data": []}
        
        logging.info(documents)
        
        for document in documents:
            document["_id"] = str(document["_id"])  # Convert ObjectId to string
            response_data["data"].append(document)

        return func.HttpResponse(
            json.dumps(response_data),
            mimetype="application/json",
            status_code=200
        )
    except Exception as e:
        logging.error(f"Error: {e}")
        return func.HttpResponse(
            "Some ERROR",
            status_code=500
        )

@app.route(route="read_all_summary")
def read_all_summary(req: func.HttpRequest) -> func.HttpResponse:
    logging.info('Request received')

    try:
        # Fetch all documents from the collection
        documents = collection.find({}, {
        "_id": 1,
        "ServiceID": 1,
        "IncidentID": 1,
        "AutoCompensation Calculation.Summary": 1
        })  # Add other attributes as needed

        # Convert documents to a list of dictionaries
        response_data = {"data": []}
        
        logging.info(documents)
        
        for document in documents:
            document["_id"] = str(document["_id"])  # Convert ObjectId to string
            response_data["data"].append(document)

        return func.HttpResponse(
            json.dumps(response_data),
            mimetype="application/json",
            status_code=200
        )
    except Exception as e:
        logging.error(f"Error: {e}")
        return func.HttpResponse(
            "Some ERROR",
            status_code=500
        )

