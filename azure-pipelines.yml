trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

variables:
  TRUFFLEHOG_JSON_REPORT: 'scan_results.json'
  TRUFFLEHOG_READABLE_REPORT: 'readable_report.txt'
  TRUFFLEHOG_HTML_REPORT: 'readable_report.html'
steps:
- task: UsePythonVersion@0
  inputs:
    versionSpec: '3.9'
    architecture: 'x64'

- bash: |    
    pip install --target="./.python_packages/lib/site-packages" -r ./requirements.txt
  displayName: 'Install dependencies'

# Run linting and generate report
- bash: |
    pip install flake8 flake8-html
    flake8 . --format=html --htmldir=flake8-report
  displayName: 'Run linting and generate report'
  continueOnError: true

# Run static analysis and generate report
- bash: |
    pip install bandit
    bandit -r . -f html -o bandit-report.html
  displayName: 'Run static analysis and generate report'
  continueOnError: true

# Step 2: Install truffleHog
- script: |
    python -m pip install --upgrade pip
    pip install truffleHog
  displayName: 'Install truffleHog'

# Step 3: Run truffleHog Scan on the Repository with Authentication
- script: |
    export GIT_URL="https://$(AZURE_DEVOPS_PAT)@dev.azure.com/isavitaeka/eShopOnWeb/_git/AzureFunction"
    trufflehog --json --regex $GIT_URL >   raw_scan_results.json
    # Convert line-delimited JSON into a valid JSON array
    echo "[" > $(TRUFFLEHOG_JSON_REPORT)
    sed 's/^/  /' raw_scan_results.json | sed '$!s/$/,/' >> $(TRUFFLEHOG_JSON_REPORT)
    echo "]" >> $(TRUFFLEHOG_JSON_REPORT)
  displayName: 'Run truffleHog Scan'
  env:
    AZURE_DEVOPS_PAT: $(AZURE_DEVOPS_PAT)  # Inject the PAT securely
  continueOnError: true


# Step 4: Generate a Readable Report
- script: |
    python - <<EOF
    import json

    # File paths from variables
    input_file = "${{ variables.TRUFFLEHOG_JSON_REPORT }}"
    output_text_file = "${{ variables.TRUFFLEHOG_READABLE_REPORT }}"
    output_html_file = "${{ variables.TRUFFLEHOG_HTML_REPORT }}"

    try:
        # Read the JSON file
        with open(input_file, 'r') as file:
            data = json.load(file)  # Load JSON as a list of findings

        # Extract issues
        issues = [
            {
                'file': result.get('SourceMetadata', {}).get('Filename', 'Unknown'),
                'secret': result.get('SourceMetadata', {}).get('Secret', 'Unknown'),
                'type': result.get('Rule', 'Unknown')
            }
            for result in data  # Iterate over the list directly
            if result.get('SourceMetadata', {}).get('Found', False)
        ]

        # Generate a readable text report
        with open(output_text_file, 'w') as report:
            if issues:
                report.write("TruffleHog Scan Report - Issues Found\n")
                report.write("=" * 40 + "\n")
                for idx, issue in enumerate(issues, 1):
                    report.write(f"Issue #{idx}\n")
                    report.write(f"File: {issue['file']}\n")
                    report.write(f"Secret: {issue['secret']}\n")
                    report.write(f"Type: {issue['type']}\n")
                    report.write("-" * 40 + "\n")
            else:
                report.write("No issues found.\n")

        # Generate an HTML report
        with open(output_html_file, 'w') as html_report:
            html_report.write("<html><head><title>TruffleHog Scan Report</title></head><body>")
            html_report.write("<h1>TruffleHog Scan Report</h1>")
            if issues:
                for idx, issue in enumerate(issues, 1):
                    html_report.write(f"<h2>Issue #{idx}</h2>")
                    html_report.write(f"<p><strong>File:</strong> {issue['file']}</p>")
                    html_report.write(f"<p><strong>Secret:</strong> {issue['secret']}</p>")
                    html_report.write(f"<p><strong>Type:</strong> {issue['type']}</p>")
                    html_report.write("<hr>")
            else:
                html_report.write("<p>No issues found.</p>")
            html_report.write("</body></html>")

    except Exception as e:
        # Handle any unexpected errors
        with open(output_text_file, 'w') as report:
            report.write("An error occurred while generating the report:\n")
            report.write(str(e))
        with open(output_html_file, 'w') as html_report:
            html_report.write("<html><body><h1>Error</h1>")
            html_report.write(f"<p>{str(e)}</p></body></html>")

    EOF
  displayName: 'Generate Readable Report'


# Archive files
- task: ArchiveFiles@2
  inputs:
    rootFolderOrFile: '$(Build.Repository.LocalPath)'
    includeRootFolder: false
    archiveType: 'zip'
    archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
    replaceExistingArchive: true

- task: PublishBuildArtifacts@1
  inputs:
    pathtoPublish: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
    artifactName: 'drop'
    publishLocation: 'Container'

# Publish linting report
- task: PublishBuildArtifacts@1
  inputs:
    pathtoPublish: 'flake8-report'
    artifactName: 'flake8-report'
    publishLocation: 'Container'

# Publish static analysis report
- task: PublishBuildArtifacts@1
  inputs:
    pathtoPublish: 'bandit-report.html'
    artifactName: 'bandit-report'
    publishLocation: 'Container'



# Publish secret scanning report
- task: PublishBuildArtifacts@1
  inputs:
    pathtoPublish: 'scan_results.json'
    artifactName: 'trufflehog-report'
    publishLocation: 'Container'