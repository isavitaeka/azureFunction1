trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

variables:
  TRUFFLEHOG_JSON_REPORT: 'scan_results.json'
  TRUFFLEHOG_READABLE_REPORT: 'readable_report.txt'
  TRUFFLEHOG_HTML_REPORT: 'readable_report.html'
steps:
- task: UsePythonVersion@0
  inputs:
    versionSpec: '3.9'
    architecture: 'x64'

- bash: |    
    pip install --target="./.python_packages/lib/site-packages" -r ./requirements.txt
  displayName: 'Install dependencies'

# Run linting and generate report
- bash: |
    pip install flake8 flake8-html
    flake8 . --format=html --htmldir=flake8-report
  displayName: 'Run linting and generate report'
  continueOnError: true

# Run static analysis and generate report
- bash: |
    pip install bandit
    bandit -r . -f html -o bandit-report.html
  displayName: 'Run static analysis and generate report'
  continueOnError: true

# Step 2: Install truffleHog
- script: |
    python -m pip install --upgrade pip
    pip install truffleHog
  displayName: 'Install truffleHog'

# Step 3: Run truffleHog Scan on the Repository with Authentication
- script: |
    export GIT_URL="https://$(AZURE_DEVOPS_PAT)@dev.azure.com/isavitaeka/eShopOnWeb/_git/AzureFunction"
    trufflehog --json --regex $GIT_URL >   raw_scan_results.json
    # Convert line-delimited JSON into a valid JSON array
    echo "[" > $(TRUFFLEHOG_JSON_REPORT)
    sed 's/^/  /' raw_scan_results.json | sed '$!s/$/,/' >> $(TRUFFLEHOG_JSON_REPORT)
    echo "]" >> $(TRUFFLEHOG_JSON_REPORT)
  displayName: 'Run truffleHog Scan'
  env:
    AZURE_DEVOPS_PAT: $(AZURE_DEVOPS_PAT)  # Inject the PAT securely
  continueOnError: true


# Step 4: Generate a Readable Report
- script: |
    python - <<EOF
    import json

    # File paths from variables
    input_file = "${{ variables.TRUFFLEHOG_JSON_REPORT }}"
    output_text_file = "${{ variables.TRUFFLEHOG_READABLE_REPORT }}"
    output_html_file = "${{ variables.TRUFFLEHOG_HTML_REPORT }}"

import json

def generate_html_report(data):
    html_report = """
    <!DOCTYPE html>
    <html>
    <head>
        <title>Branch Commit Report</title>
        <style>
            body {font-family: Arial, sans-serif; margin: 20px;}
            table {border-collapse: collapse; width: 100%;}
            th, td {border: 1px solid #dddddd; text-align: left; padding: 8px;}
            th {background-color: #f2f2f2;}
        </style>
    </head>
    <body>
        <h2>Branch Commit Report</h2>
        <table>
            <tr>
                <th>Branch</th>
                <th>Commit</th>
                <th>Commit Hash</th>
                <th>Date</th>
                <th>Path</th>
                <th>Reason</th>
                <th>Strings Found</th>
            </tr>"""

    for entry in data:
        html_report += f"""
            <tr>
                <td>{entry['branch']}</td>
                <td>{entry['commit']}</td>
                <td>{entry['commitHash']}</td>
                <td>{entry['date']}</td>
                <td>{entry['path']}</td>
                <td>{entry['reason']}</td>
                <td><ul>"""
        for string in entry['stringsFound']:
            html_report += f"<li>{string}</li>"
        html_report += "</ul></td></tr>"

    html_report += """
        </table>
    </body>
    </html>
    """

    return html_report

# Function to read JSON data from a file and generate HTML report
def generate_report_from_file(json_file_path, output_html_path):
    with open(json_file_path, 'r') as file:
        data = json.load(file)
    
    html_report = generate_html_report(data)
    
    with open(output_html_path, 'w') as file:
        file.write(html_report)

    print(f"HTML report has been generated and saved as '{output_html_path}'.")

generate_report_from_file(input_file, output_html_file)

    EOF
  displayName: 'Generate Readable Report'


# Archive files
- task: ArchiveFiles@2
  inputs:
    rootFolderOrFile: '$(Build.Repository.LocalPath)'
    includeRootFolder: false
    archiveType: 'zip'
    archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
    replaceExistingArchive: true

- task: PublishBuildArtifacts@1
  inputs:
    pathtoPublish: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
    artifactName: 'drop'
    publishLocation: 'Container'

# Publish linting report
- task: PublishBuildArtifacts@1
  inputs:
    pathtoPublish: 'flake8-report'
    artifactName: 'flake8-report'
    publishLocation: 'Container'

# Publish static analysis report
- task: PublishBuildArtifacts@1
  inputs:
    pathtoPublish: 'bandit-report.html'
    artifactName: 'bandit-report'
    publishLocation: 'Container'



# Publish secret scanning report
- task: PublishBuildArtifacts@1
  inputs:
    pathtoPublish: 'scan_results.json'
    artifactName: 'trufflehog-report'
    publishLocation: 'Container'

# Publish secret scanning report
- task: PublishBuildArtifacts@1
  inputs:
    pathtoPublish: 'readable_report.txt'
    artifactName: 'trufflehog-report.txt'
    publishLocation: 'Container'